-
  name: 'Provisioning CA and Generating TLS Certificates'
  hosts: master-1
  tasks:
    -
      name: 'Create CA crt, csr and key'
      shell: |
        cd /vagrant/.vagrant/shared-folder
        openssl genrsa -out ca.key 2048
        sudo sed -i '0,/RANDFILE/{s/RANDFILE/\#&/}' /etc/ssl/openssl.cnf
        openssl req -new -key ca.key -subj "/CN=KUBERNETES-CA" -out ca.csr
        openssl x509 -req -in ca.csr -signkey ca.key -CAcreateserial  -out ca.crt -days 1000
    -
      name: 'Create admin crt, csr and key'
      shell: |
        cd /vagrant/.vagrant/shared-folder
        openssl genrsa -out admin.key 2048
        openssl req -new -key admin.key -subj "/CN=admin/O=system:masters" -out admin.csr
        openssl x509 -req -in admin.csr -CA ca.crt -CAkey ca.key -CAcreateserial  -out admin.crt -days 1000
    -
      name: 'Create kube-controller-manager crt, csr and key'
      shell: |
        cd /vagrant/.vagrant/shared-folder
        openssl genrsa -out kube-controller-manager.key 2048
        openssl req -new -key kube-controller-manager.key -subj "/CN=system:kube-controller-manager" -out kube-controller-manager.csr
        openssl x509 -req -in kube-controller-manager.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out kube-controller-manager.crt -days 1000
    -
      name: 'Create kube-proxy crt, csr and key'
      shell: |
        cd /vagrant/.vagrant/shared-folder
        openssl genrsa -out kube-proxy.key 2048
        openssl req -new -key kube-proxy.key -subj "/CN=system:kube-proxy" -out kube-proxy.csr
        openssl x509 -req -in kube-proxy.csr -CA ca.crt -CAkey ca.key -CAcreateserial  -out kube-proxy.crt -days 1000    
    -
      name: 'Create kube-scheduler crt, csr and key'
      shell: |
        cd /vagrant/.vagrant/shared-folder
        openssl genrsa -out kube-scheduler.key 2048
        openssl req -new -key kube-scheduler.key -subj "/CN=system:kube-scheduler" -out kube-scheduler.csr
        openssl x509 -req -in kube-scheduler.csr -CA ca.crt -CAkey ca.key -CAcreateserial  -out kube-scheduler.crt -days 1000
    -
      name: 'Create openssl configuration file for kube-apiserver'
      shell: |
        cd /vagrant/.vagrant/shared-folder
        ALT_NAMES_IP=$({
          LIST_IP=$(cat /vagrant/.vagrant/shared-folder/inventory.txt | grep master-* | awk '{print $2}')
          LOADBALANCER_IP=$(cat /vagrant/.vagrant/shared-folder/inventory.txt | grep loadbalancer | awk '{print $2}')
          i=2
          for MASTER_IP in ${LIST_IP};do
            echo "IP.$i = $MASTER_IP"
            i=$((i+1))
          done
          echo "IP.$i = $LOADBALANCER_IP"
          i=$((i+1))
          echo "IP.$i = 127.0.0.1"
        })
        cat > openssl.cnf <<EOF
        [req]
        req_extensions = v3_req
        distinguished_name = req_distinguished_name
        [req_distinguished_name]
        [ v3_req ]
        basicConstraints = CA:FALSE
        keyUsage = nonRepudiation, digitalSignature, keyEncipherment
        subjectAltName = @alt_names
        [alt_names]
        DNS.1 = kubernetes
        DNS.2 = kubernetes.default
        DNS.3 = kubernetes.default.svc
        DNS.4 = kubernetes.default.svc.cluster.local
        IP.1 = 10.96.0.1
        ${ALT_NAMES_IP}
        EOF
    -
      name: 'Create kube-apiserver crt, csr and key'
      shell: |
        cd /vagrant/.vagrant/shared-folder
        openssl genrsa -out kube-apiserver.key 2048
        openssl req -new -key kube-apiserver.key -subj "/CN=kube-apiserver" -out kube-apiserver.csr -config openssl.cnf
        openssl x509 -req -in kube-apiserver.csr -CA ca.crt -CAkey ca.key -CAcreateserial  -out kube-apiserver.crt -extensions v3_req -extfile openssl.cnf -days 1000
    -
      name: 'Create openssl configuration file for etcd'
      shell: |
        cd /vagrant/.vagrant/shared-folder
        ALT_NAMES_IP=$({
          LIST_IP=$(cat /vagrant/.vagrant/shared-folder/inventory.txt | grep master-* | awk '{print $2}')
          i=1
          for MASTER_IP in ${LIST_IP};do
            echo "IP.$i = $MASTER_IP"
            i=$((i+1))
          done
          echo "IP.$i = 127.0.0.1"
        })
        cat > openssl-etcd.cnf <<EOF
        [req]
        req_extensions = v3_req
        distinguished_name = req_distinguished_name
        [req_distinguished_name]
        [ v3_req ]
        basicConstraints = CA:FALSE
        keyUsage = nonRepudiation, digitalSignature, keyEncipherment
        subjectAltName = @alt_names
        [alt_names]
        ${ALT_NAMES_IP}
        EOF
    -
      name: 'Create etcd crt, csr and key'
      shell: |
        cd /vagrant/.vagrant/shared-folder
        openssl genrsa -out etcd-server.key 2048
        openssl req -new -key etcd-server.key -subj "/CN=etcd-server" -out etcd-server.csr -config openssl-etcd.cnf
        openssl x509 -req -in etcd-server.csr -CA ca.crt -CAkey ca.key -CAcreateserial  -out etcd-server.crt -extensions v3_req -extfile openssl-etcd.cnf -days 1000
    -
      name: 'Create service-account crt, csr and key'
      shell: |
        cd /vagrant/.vagrant/shared-folder
        openssl genrsa -out service-account.key 2048
        openssl req -new -key service-account.key -subj "/CN=service-accounts" -out service-account.csr
        openssl x509 -req -in service-account.csr -CA ca.crt -CAkey ca.key -CAcreateserial  -out service-account.crt -days 1000
