-
  name: 'Bootstrapping the Kubernetes Control Plane'
  hosts: master-*
  tasks: 
    -
      name: 'Install Kubernetes binaries'
      shell: |
        sudo mkdir -p /etc/kubernetes/config
        wget -q --show-progress --https-only --timestamping \
        "https://storage.googleapis.com/kubernetes-release/release/v1.13.0/bin/linux/amd64/kube-apiserver" \
        "https://storage.googleapis.com/kubernetes-release/release/v1.13.0/bin/linux/amd64/kube-controller-manager" \
        "https://storage.googleapis.com/kubernetes-release/release/v1.13.0/bin/linux/amd64/kube-scheduler" \
        "https://storage.googleapis.com/kubernetes-release/release/v1.13.0/bin/linux/amd64/kubectl"
        chmod +x kube-apiserver kube-controller-manager kube-scheduler kubectl
        sudo mv kube-apiserver kube-controller-manager kube-scheduler kubectl /usr/local/bin/
    -
      name: 'Copy kube-controller-manager kubeconfig to /var/lib/kubernetes'
      shell: |
        cd /vagrant/.vagrant/shared-folder
        sudo cp ca.crt ca.key kube-apiserver.crt kube-apiserver.key \
        service-account.key service-account.crt \
        etcd-server.key etcd-server.crt /var/lib/kubernetes/
    -
      name: 'Create kube-apiserver service'
      shell: |
        INTERNAL_IP=$(ip addr show enp0s8 | grep "inet " | awk '{print $2}' | cut -d / -f 1)
        ETCD_SERVERS=$(cat /vagrant/.vagrant/shared-folder/inventory.txt | grep master-* | awk '{print $2}' | sed 's/^/https:\/\//' | sed 's/$/:2379/' | tr '\n' ',' | sed 's/.$//')
        cat <<EOF | sudo tee /etc/systemd/system/kube-apiserver.service
        [Unit]
        Description=Kubernetes API Server
        Documentation=https://github.com/kubernetes/kubernetes

        [Service]
        ExecStart=/usr/local/bin/kube-apiserver \\
          --advertise-address=${INTERNAL_IP} \\
          --allow-privileged=true \\
          --apiserver-count=2 \\
          --audit-log-maxage=30 \\
          --audit-log-maxbackup=3 \\
          --audit-log-maxsize=100 \\
          --audit-log-path=/var/log/audit.log \\
          --authorization-mode=Node,RBAC \\
          --bind-address=0.0.0.0 \\
          --client-ca-file=/var/lib/kubernetes/ca.crt \\
          --enable-admission-plugins=NodeRestriction,ServiceAccount \\
          --enable-swagger-ui=true \\
          --enable-bootstrap-token-auth=true \\
          --etcd-cafile=/var/lib/kubernetes/ca.crt \\
          --etcd-certfile=/var/lib/kubernetes/etcd-server.crt \\
          --etcd-keyfile=/var/lib/kubernetes/etcd-server.key \\
          --etcd-servers=${ETCD_SERVERS} \\
          --event-ttl=1h \\
          --encryption-provider-config=/var/lib/kubernetes/encryption-config.yaml \\
          --kubelet-certificate-authority=/var/lib/kubernetes/ca.crt \\
          --kubelet-client-certificate=/var/lib/kubernetes/kube-apiserver.crt \\
          --kubelet-client-key=/var/lib/kubernetes/kube-apiserver.key \\
          --kubelet-https=true \\
          --runtime-config=api/all=true \\
          --service-account-key-file=/var/lib/kubernetes/service-account.crt \\
          --service-cluster-ip-range=10.96.0.0/24 \\
          --service-node-port-range=30000-32767 \\
          --tls-cert-file=/var/lib/kubernetes/kube-apiserver.crt \\
          --tls-private-key-file=/var/lib/kubernetes/kube-apiserver.key \\
          --v=2
        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
        EOF
    -
      name: 'Copy kube-controller-manager kubeconfig to /var/lib/kubernetes'
      shell: |
        cd /vagrant/.vagrant/shared-folder
        sudo cp kube-controller-manager.kubeconfig /var/lib/kubernetes/
    -
      name: 'Create kube-controller-manager service'
      shell: |
        CIDR=$(ip r s dev enp0s8 | awk '{print $1}')
        cat <<EOF | sudo tee /etc/systemd/system/kube-controller-manager.service
        [Unit]
        Description=Kubernetes Controller Manager
        Documentation=https://github.com/kubernetes/kubernetes

        [Service]
        ExecStart=/usr/local/bin/kube-controller-manager \\
          --address=0.0.0.0 \\
          --cluster-cidr=${CIDR} \\
          --cluster-name=kubernetes \\
          --cluster-signing-cert-file=/var/lib/kubernetes/ca.crt \\
          --cluster-signing-key-file=/var/lib/kubernetes/ca.key \\
          --kubeconfig=/var/lib/kubernetes/kube-controller-manager.kubeconfig \\
          --leader-elect=true \\
          --root-ca-file=/var/lib/kubernetes/ca.crt \\
          --service-account-private-key-file=/var/lib/kubernetes/service-account.key \\
          --service-cluster-ip-range=10.96.0.0/24 \\
          --use-service-account-credentials=true \\
          --v=2
        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
        EOF
    -
      name: 'Copy kube-scheduler kubeconfig to /var/lib/kubernetes'
      shell: |
        cd /vagrant/.vagrant/shared-folder
        sudo cp kube-scheduler.kubeconfig /var/lib/kubernetes/
    -
      name: 'Create kube-scheduler service'
      shell: |
        cat <<EOF | sudo tee /etc/systemd/system/kube-scheduler.service
        [Unit]
        Description=Kubernetes Scheduler
        Documentation=https://github.com/kubernetes/kubernetes

        [Service]
        ExecStart=/usr/local/bin/kube-scheduler \\
          --kubeconfig=/var/lib/kubernetes/kube-scheduler.kubeconfig \\
          --address=127.0.0.1 \\
          --leader-elect=true \\
          --v=2
        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
        EOF
    -
      name: 'Enable and start the Controller services'
      shell: |
        sudo systemctl daemon-reload
        sudo systemctl enable kube-apiserver kube-controller-manager kube-scheduler
        sudo systemctl start kube-apiserver kube-controller-manager kube-scheduler
-
  name: 'Kubernetes Frontend Load Balancer'
  hosts: loadbalancer
  tasks: 
    -
      name: 'Install haproxy'
      shell: 'sudo apt update && sudo apt install -y haproxy'
    -
      name: 'Modify haproxy configuration file'
      shell: |
        INTERNAL_IP=$(ip addr show enp0s8 | grep "inet " | awk '{print $2}' | cut -d / -f 1)
        MASTER_NODES=$(cat /vagrant/.vagrant/shared-folder/inventory.txt | grep master-* | sed 's/^/    server /' | sed 's/$/:6443 check fall 3 rise 2/')
        cat <<EOF | sudo tee /etc/haproxy/haproxy.cfg 
        frontend kubernetes
            bind ${INTERNAL_IP}:6443
            option tcplog
            mode tcp
            default_backend kubernetes-master-nodes

        backend kubernetes-master-nodes
            mode tcp
            balance roundrobin
            option tcp-check
        ${MASTER_NODES}
        EOF
        sudo service haproxy restart
