-
  name: 'TLS Bootstrapping the Kubernetes Worker nodes'
  hosts: worker-*
  tasks: 
    -
      name: 'Install Kubernetes binaries for Worker nodes'
      shell: |
        sudo mkdir -p \
        /etc/cni/net.d \
        /opt/cni/bin \
        /var/lib/kubelet \
        /var/lib/kube-proxy \
        /var/lib/kubernetes \
        /var/run/kubernetes
        wget -q --show-progress --https-only --timestamping \
        https://storage.googleapis.com/kubernetes-release/release/v1.13.0/bin/linux/amd64/kubectl \
        https://storage.googleapis.com/kubernetes-release/release/v1.13.0/bin/linux/amd64/kube-proxy \
        https://storage.googleapis.com/kubernetes-release/release/v1.13.0/bin/linux/amd64/kubelet
        chmod +x kubectl kube-proxy kubelet
        sudo mv kubectl kube-proxy kubelet /usr/local/bin/
    -
      name: 'Copy CA certificate to /var/lib/kubernetes'
      shell: |
        cd /vagrant/.vagrant/shared-folder
        sudo cp ca.crt /var/lib/kubernetes/
-
  name: 'Give CSR access rights to Worker nodes'
  hosts: master-1
  tasks: 
    -
      name: 'Create Bootstrap Token to be used by Worker nodes (kubelet) to invoke Certificate API'
      shell: |
        cd /vagrant/.vagrant/shared-folder
        cat > bootstrap-token-07401b.yaml <<EOF
        apiVersion: v1
        kind: Secret
        metadata:
          # Name MUST be of form "bootstrap-token-<token id>"
          name: bootstrap-token-07401b
          namespace: kube-system

        # Type MUST be 'bootstrap.kubernetes.io/token'
        type: bootstrap.kubernetes.io/token
        stringData:
          # Human readable description. Optional.
          description: "The default bootstrap token generated by 'kubeadm init'."

          # Token ID and secret. Required.
          token-id: 07401b
          token-secret: f395accd246ae52d

          # Expiration. Optional.
          expiration: 2024-01-01T03:22:11Z

          # Allowed usages.
          usage-bootstrap-authentication: "true"
          usage-bootstrap-signing: "true"

          # Extra groups to authenticate the token as. Must start with "system:bootstrappers:"
          auth-extra-groups: system:bootstrappers:worker
        EOF
        kubectl create -f bootstrap-token-07401b.yaml
    -
      name: 'Authorize Worker nodes (kubelet) to create, approve and auto renew Certificates'
      shell: |
        kubectl create clusterrolebinding create-csrs-for-bootstrapping --clusterrole=system:node-bootstrapper --group=system:bootstrappers
        kubectl create clusterrolebinding auto-approve-csrs-for-group --clusterrole=system:certificates.k8s.io:certificatesigningrequests:nodeclient --group=system:bootstrappers
        kubectl create clusterrolebinding auto-approve-renewals-for-nodes --clusterrole=system:certificates.k8s.io:certificatesigningrequests:selfnodeclient --group=system:nodes
-
  name: 'Add kube services for Worker nodes (kubelet & kube-proxy)'
  hosts: worker-*
  tasks: 
    -
      name: 'Configure kubelet to TLS Bootstrap'
      shell: |
        LOADBALANCER_IP=$(cat /vagrant/.vagrant/shared-folder/inventory.txt | grep loadbalancer | awk '{print $2}')
        cat <<EOF | sudo tee /var/lib/kubelet/bootstrap-kubeconfig
        apiVersion: v1
        clusters:
        - cluster:
            certificate-authority: /var/lib/kubernetes/ca.crt
            server: https://${LOADBALANCER_IP}:6443
          name: bootstrap
        contexts:
        - context:
            cluster: bootstrap
            user: kubelet-bootstrap
          name: bootstrap
        current-context: bootstrap
        kind: Config
        preferences: {}
        users:
        - name: kubelet-bootstrap
          user:
            token: 07401b.f395accd246ae52d
        EOF
    -
      name: 'Create kubelet configuration file'
      shell: |
        cat <<EOF | sudo tee /var/lib/kubelet/kubelet-config.yaml
        kind: KubeletConfiguration
        apiVersion: kubelet.config.k8s.io/v1beta1
        authentication:
          anonymous:
            enabled: false
          webhook:
            enabled: true
          x509:
            clientCAFile: "/var/lib/kubernetes/ca.crt"
        authorization:
          mode: Webhook
        cgroupDriver: systemd
        clusterDomain: "cluster.local"
        clusterDNS:
          - "10.96.0.10"
        resolvConf: "/run/systemd/resolve/resolv.conf"
        runtimeRequestTimeout: "15m"
        EOF
    -
      name: 'Create kubelet service'
      shell: |
        cat <<EOF | sudo tee /etc/systemd/system/kubelet.service
        [Unit]
        Description=Kubernetes Kubelet
        Documentation=https://github.com/kubernetes/kubernetes
        After=docker.service
        Requires=docker.service

        [Service]
        ExecStart=/usr/local/bin/kubelet \\
          --bootstrap-kubeconfig="/var/lib/kubelet/bootstrap-kubeconfig" \\
          --config=/var/lib/kubelet/kubelet-config.yaml \\
          --image-pull-progress-deadline=2m \\
          --kubeconfig=/var/lib/kubelet/kubeconfig \\
          --cert-dir=/var/lib/kubelet/pki/ \\
          --rotate-certificates=true \\
          --rotate-server-certificates=true \\
          --network-plugin=cni \\
          --register-node=true \\
          --v=2
        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
        EOF
    -
      name: 'Copy kube-proxy.kubeconfig to /var/lib/kube-proxy'
      shell: |
        cd /vagrant/.vagrant/shared-folder
        sudo cp kube-proxy.kubeconfig /var/lib/kube-proxy/kubeconfig
    -
      name: 'Create kube-proxy configuration file'
      shell: |
        CIDR=$(ip r s dev enp0s8 | awk '{print $1}')
        cat <<EOF | sudo tee /var/lib/kube-proxy/kube-proxy-config.yaml
        kind: KubeProxyConfiguration
        apiVersion: kubeproxy.config.k8s.io/v1alpha1
        clientConnection:
          kubeconfig: "/var/lib/kube-proxy/kubeconfig"
        mode: "iptables"
        clusterCIDR: "${CIDR}"
        EOF
    -
      name: 'Create kube-proxy service'
      shell: |
        cat <<EOF | sudo tee /etc/systemd/system/kube-proxy.service
        [Unit]
        Description=Kubernetes Kube Proxy
        Documentation=https://github.com/kubernetes/kubernetes

        [Service]
        ExecStart=/usr/local/bin/kube-proxy \\
          --config=/var/lib/kube-proxy/kube-proxy-config.yaml
        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
        EOF
    -
      name: 'Enable and start Worker services'
      shell: |
        sudo systemctl daemon-reload
        sudo systemctl enable kubelet kube-proxy
        sudo systemctl start kubelet kube-proxy
    -
      name: 'Wait for Workers to generate CSRs'
      pause:
        seconds: 10
-
  name: 'Approve Server CSR from Master node'
  hosts: master-1
  tasks: 
    -
      name: 'Approve Server CSR'
      shell: "kubectl certificate approve $(kubectl get csr|grep csr|awk -F ' ' '{print $1}')"
